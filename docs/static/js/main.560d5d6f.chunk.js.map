{"version":3,"sources":["logo.svg","Home.tsx","Pref.tsx","Router.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Content","container","React","useRef","useState","activePrefs","setActivePrefs","useEffect","codes","i","prefs","length","code","name","fetch","then","res","json","data","_prefs","j","text","svg","current","mapContainer","querySelector","innerHTML","document","querySelectorAll","forEach","pref","dataset","Number","classList","add","addEventListener","event","currentTarget","style","fill","window","location","hash","clickHandler","contains","ref","className","src","logo","alt","map","item","key","data-code","onClick","useParams","setPref","apps","setApps","_apps","push","link","href","items","app","match","data-link","exact","path","Boolean","hostname","ReactDOM","render","StrictMode","Router","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.560d5d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.44051220.svg\";","import React from \"react\";\nimport logo from './logo.svg'\nimport prefs from './prefestures.json'\nimport './Home.scss'\n\ntype PrefecturesByName = {\n  [key: string]: number;\n}\n\ntype ActivePrefs = {\n  [key: number]: boolean;\n}\n\nconst Content = () => {\n  const container = React.useRef<HTMLDivElement>(null)\n  const [ activePrefs, setActivePrefs ] = React.useState<ActivePrefs>()\n\n  React.useEffect(() => {\n    const codes = {} as PrefecturesByName\n    for (let i = 0; i < prefs.length; i++) {\n      if (prefs[i].code && prefs[i].name) {\n        codes[prefs[i].name] = prefs[i].code\n      }\n    }\n\n    fetch('https://raw.githubusercontent.com/iemeshi/registry/master/apps.json')\n    .then((res) => {\n      return res.json()\n    }).then((data) => {\n      const _prefs = {} as ActivePrefs\n      for (let i = 0; i < prefs.length; i++) {\n        _prefs[prefs[i].code] = false\n        for (let j = 0; j < data.length; j++) {\n          const code = codes[data[j]['都道府県名']]\n          if (prefs[i].code === code) {\n            _prefs[prefs[i].code] = true\n          }\n        }\n      }\n      setActivePrefs(_prefs)\n    })\n  }, [])\n\n  React.useEffect(() => {\n    const svgMap = 'https://raw.githubusercontent.com/geolonia/japanese-prefectures/master/map-polygon.svg'\n    fetch(svgMap).then((res) => {\n      return res.text()\n    }).then((svg) => {\n      if (container.current) {\n        const mapContainer = container.current.querySelector('.svg-map')\n        if (mapContainer) {\n          mapContainer.innerHTML = svg\n\n          const prefs = document.querySelectorAll<HTMLElement>('.geolonia-svg-map .prefecture')\n          prefs.forEach((pref: HTMLElement) => {\n            if (pref.dataset && pref.dataset.code && activePrefs && activePrefs[Number(pref.dataset.code)]) {\n              pref.classList.add('active')\n\n              pref.addEventListener('click', (event) => {\n                // @ts-ignore\n                event.currentTarget.style.fill = 'rgba(255, 0, 0, 0.4)'\n                window.location.hash = `/${pref.dataset.code}`\n              })\n            }\n          })\n        }\n\n        const prefs = document.querySelectorAll<HTMLAnchorElement>('.text-prefs .pref .link')\n        prefs.forEach((pref: HTMLAnchorElement) => {\n          if (pref.dataset && pref.dataset.code && activePrefs && activePrefs[Number(pref.dataset.code)]) {\n            pref.classList.add('active')\n          }\n        })\n      }\n    })\n  }, [container, activePrefs])\n\n  const clickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (event.currentTarget.classList.contains('active')) {\n      window.location.hash = `/${event.currentTarget.dataset.code}`\n    }\n  }\n\n  return (\n    <div ref={container} className=\"home\">\n      <div className=\"map-container\">\n        <div className=\"branding\">\n          <h1 className=\"iemeshi\"><img src={logo} alt=\"\"/>イエメシ</h1>\n          <h2>テイクアウトができるお店</h2>\n        </div>\n        <div className=\"svg-map\"></div>\n      </div>\n      <div className=\"text-prefs\">\n        {prefs.map((item) =>\n          <div key={item.code} className=\"pref\"><button className=\"link\" data-code={item.code} onClick={clickHandler}>{item.name}</button></div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Content;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport prefs from './prefestures.json'\nimport logo from './logo.svg'\n\nimport './Pref.scss'\n\ntype PrefecturesByCode = {\n  [key: number]: string;\n}\n\ntype App = {\n  CNAME: string;\n  GitHub: string;\n  \"サブドメイン\": string;\n  \"地域名\": string;\n  \"都道府県名\": string;\n}\n\nconst Content = () => {\n  const { code } = useParams()\n  const [ pref, setPref ] = useState<string>('')\n  const [ apps, setApps ] = useState<App[]>([])\n\n  React.useEffect(() => {\n    if (!pref) {\n      return\n    }\n\n    fetch('https://raw.githubusercontent.com/iemeshi/registry/master/apps.json')\n    .then((res) => {\n      return res.json()\n    }).then((data) => {\n      const _apps = []\n      for (let i = 0; i < data.length; i++) {\n        if (pref && pref === data[i]['都道府県名']) {\n          _apps.push(data[i])\n        }\n      }\n      setApps(_apps)\n    })\n  }, [pref])\n\n  React.useEffect(() => {\n    for (let i = 0; i < prefs.length; i++) {\n      if (prefs[i].code && prefs[i].name && code && Number(code) === prefs[i].code) {\n        setPref(prefs[i].name)\n        break\n      }\n    }\n  }, [code])\n\n  const clickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (event.currentTarget.dataset.link) {\n      window.location.href = event.currentTarget.dataset.link\n    }\n  }\n\n\n  const items = []\n  for (let i = 0; i < apps.length; i++) {\n    const app = apps[i]\n\n    // Following condition should be removed when problem is solved on netlify.\n    if (app['GitHub'].match(/^https:\\/\\/github\\.com\\/iemeshi\\//)) {\n      items.push(<div key={i} className=\"pref\"><button className=\"link\" data-link={`https://${app['サブドメイン']}.iemeshi.jp/`} onClick={clickHandler}>{app['地域名']}</button></div>)\n    } else {\n      items.push(<div key={i} className=\"pref\"><button className=\"link\" data-link={`https://${app['CNAME']}/`} onClick={clickHandler}>{app['地域名']}</button></div>)\n    }\n  }\n\n  return (\n    <div className=\"pref\">\n      <div className=\"branding\">\n        <h1 className=\"iemeshi\"><img src={logo} alt=\"\"/>イエメシ</h1>\n      </div>\n      <h2>{pref}</h2>\n      <div className=\"nav\">\n        {items}\n      </div>\n\n      <div className=\"go-back\"><a href=\"#/\">戻る</a></div>\n    </div>\n  );\n}\n\nexport default Content;\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from './Home'\nimport Pref from './Pref'\n\nfunction Content() {\n  return (\n    <HashRouter>\n      <Route exact path=\"/\"><Home /></Route>\n      <Route exact path=\"/:code\"><Pref /></Route>\n    </HashRouter>\n  );\n}\n\nexport default Content;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}